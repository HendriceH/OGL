name: OpenFOAM (OpenFOAM Foundation)

on: [pull_request]

env:
  BUILD_TYPE: Release
  FOAM_INST_DIR: /home/runner/OpenFOAM/
  WM_PROJECT: OpenFOAM
  WM_OPTIONS: linux64gccDPInt32Opt
  WM_COMPILER_TYPE: system
  WM_COMPILER: Gcc
  WM_PRECISION_OPTION: DP
  WM_LABEL_SIZE: 32
  WM_COMPILE_OPTION: Opt
  WM_OSTYPE: POSIX
  WM_ARCH: linux64
  WM_ARCH_OPTION: 64
  WM_LINK_LANGUAGE: c++
  WM_LABEL_OPTION:  Int32
  WM_CFLAGS: -m64 -fPIC
  WM_CXX: g++
  WM_CXXFLAGS: -m64 -fPIC -std=c++0x
  WM_LDFLAGS: -m64
  WM_COMPILER_LIB_ARCH: 64
  MPI_ARCH_PATH: /usr
  
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        OF: [{repo: "https://github.com/OpenFOAM/OpenFOAM-10.git",
              path: "OpenFOAM-10",
              version: "10",
              mpi: "SYSTEMOPENMPI"}]
    
  
    steps:
    - name: Setting up OF enviroment
      run: |
        echo "FOAM_ENV_FILE=$FOAM_INST_DIR/env_file" >> $GITHUB_ENV
        echo "WM_PROJECT_VERSION=${{ matrix.OF.version }}" >> $GITHUB_ENV
        echo "WM_PROJECT_DIR=$FOAM_INST_DIR/${{matrix.OF.path}}" >> $GITHUB_ENV
        echo "WM_DIR=${{env.FOAM_INST_DIR}}/${{ matrix.OF.path }}/wmake" >> $GITHUB_ENV
        echo "${{env.FOAM_INST_DIR}}/${{ matrix.OF.path }}/wmake" >> $GITHUB_PATH
        echo "WM_MPLIB=${{matrix.OF.mpi}}" >> $GITHUB_ENV
        echo "WM_PROJECT_INST_DIR=${{env.FOAM_INST_DIR}}" >> $GITHUB_ENV
        echo "WM_THIRD_PARTY_DIR=${{env.FOAM_INST_DIR}}/ThirdParty-${{matrix.OF.version}}" >> $GITHUB_ENV
        echo "FOAM_ETC=$FOAM_INST_DIR/${{matrix.OF.path}}/etc" >> $GITHUB_ENV
        echo "FOAM_SRC=$FOAM_INST_DIR/${{matrix.OF.path}}/src" >> $GITHUB_ENV
        echo "FOAM_APP=$FOAM_INST_DIR/${{matrix.OF.path}}/applications" >> $GITHUB_ENV
        echo "FOAM_TUTORIALS=$FOAM_INST_DIR/${{matrix.OF.path}}/tutorials" >> $GITHUB_ENV
        echo "FOAM_UTILITIES=$FOAM_INST_DIR/${{matrix.OF.path}}/applications/utilities" >> $GITHUB_ENV
        echo "FOAM_SOLVERS=$FOAM_INST_DIR/${{matrix.OF.path}}/applications/solvers" >> $GITHUB_ENV
        echo "FOAM_LIBBIN=$FOAM_INST_DIR/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/lib" >> $GITHUB_ENV
        echo "FOAM_APPBIN=$FOAM_INST_DIR/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_ENV
        echo "FOAM_EXT_LIBBIN=$FOAM_INST_DIR/ThirdParty/platforms/linux64GccDPInt32Opt/lib" >> $GITHUB_ENV
        echo "$FOAM_INST_DIR/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_PATH
        echo "FOAM_USER_PATH=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}" >> $GITHUB_ENV
        echo "FOAM_USER_PLATTFORM=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt" >> $GITHUB_ENV
        echo "FOAM_USER_LIBBIN=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/lib" >> $GITHUB_ENV
        echo "FOAM_USER_APPBIN=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_ENV
        echo "FOAM_MPI=openmpi-system" >> $GITHUB_ENV
        echo "${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_PATH
        echo "Ginkgo_DIR=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/lib/cmake/Ginkgo" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${{env.FOAM_INST_DIR}}/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/lib:        ${{env.FOAM_INST_DIR}}/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/lib/dummy:${{env.FOAM_INST_DIR}}/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/lib/openmpi-system" >> $GITHUB_ENV
    
    - name: Cache OpenFOAM
      uses: actions/cache@v3
      with:
        key: ${{ matrix.OF.path }}
        path: /home/runner/OpenFOAM/OpenFOAM-9
          
    - name: Install build depencies  
      # Clone OpenFOAM
      run: |
        sudo apt update
        sudo apt install \
          git \
          build-essential \
          autoconf \
          autotools-dev \
          flex bison cmake zlib1g-dev \
          libfl-dev \
          mpi-default-bin mpi-default-dev \
          libopenmpi-dev openmpi-bin gnuplot libreadline-dev libncurses-dev libxt-dev \
          ptscotch libptscotch-dev libscotch-dev libcgal-dev python python-dev

    - name: Clone OpenFOAM 
      run: |
        if [ ! -d /home/runner/OpenFOAM/${{matrix.OF.path}} ]; then
          git clone  --depth 1 ${{ matrix.OF.repo }} \
            /home/runner/OpenFOAM/${{ matrix.OF.path }}
        else
          echo "Skipping clone"
        fi


    - name: Build OpenFOAM src
      # Clone OpenFOAM
      run: |
        cd /home/runner/OpenFOAM/${{ matrix.OF.path }}/wmake/src && make
        cd /home/runner/OpenFOAM/${{ matrix.OF.path }}
        mkdir -p /home/runner/OpenFOAM/${{ matrix.OF.path }}/platforms/linux64GccDPInt32OptSYSTEMOPENMPI/src/Pstream/mpi
        mkdir -p /home/runner/OpenFOAM/${{ matrix.OF.path }}/platforms/linux64GccDPInt32OptSYSTEMOPENMPI/src/parallel/decompose/ptscotchDecomp/
        ./Allwmake -j

    - name: Show OpenFOAM folder
      if: always()
      # Clone OpenFOAM
      run: |
        ls /home/runner/OpenFOAM/${{ matrix.OF.path }}
        ls /home/runner/OpenFOAM/${{ matrix.OF.path }}/platforms
        ls /home/runner/OpenFOAM/${{ matrix.OF.path }}/platforms/linux64GccDPInt32OptSYSTEMOPENMPI
        ls /home/runner/OpenFOAM/${{ matrix.OF.path }}/platforms/linux64GccDPInt32OptSYSTEMOPENMPI/src/Pstream
        cd /home/runner/OpenFOAM/${{ matrix.OF.path }}/platforms
        find . -name "libPstream.so"
      
    - uses: actions/checkout@v2
    - name: Install ninja-build tool
      # You may pin to the exact commit or the version.
      # uses: seanmiddleditch/gha-setup-ninja@16b940825621068d98711680b6c3ff92201f8fc0
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        # Version of ninja-build to install
        version: 1.10.0 # default is 1.10.0
    
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}
      run: |
        mkdir build 
        cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
