name: Test AWS
run-name: Test AWS
on:
  # enable to manually trigger the tests
  workflow_dispatch:
jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::308634587211:role/Github-OIDC-Role-29bocUD8VBZr
          aws-region: us-east-1
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: HendriceH/ec2-github-runner@v1.8
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-068fc371c857ce6dc # ami-0e8a34246278c21e4
          ec2-instance-type: g4dn.4xlarge
          iam-role-name: Role4Github
          subnet-id: subnet-b5d2adbb
          security-group-id: sg-559f8967
          pre-runner-script: |
                 #!/bin/bash
                 sudo yum update -y && \ 
                 sudo yum install docker git libicu ninja-build openmpi-devel -y
                 sudo amazon-linux-extras install epel -y 
                 sudo yum install Lmod -y
                 sudo systemctl enable docker
                 sudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
                 sudo mkfs -t xfs /dev/sda1
                 sudo mkdir -p /share
                 sudo mount /dev/sda1 /share
                 aws s3 cp s3://ucfd-share/pcluster/3.x/alinux2/x86_64/postinstall_github .
                 chmod +x postinstall_github
                 sudo ./postinstall_github > ~/install.log
                 aws s3 cp s3://ucfd-share/pcluster/3.x/alinux2/x86_64/4.0.1.lua /share/lmod/modulefiles/Generic/openmpi/
                 export COMPILER_TYPE="gnu10"
                 export CC="gcc10-gcc"
                 export CXX="gcc10-c++"
                 export PATH="/opt/nvidia/cuda/bin:/share/software/cmake/3.22.6/bin:/lib64/openmpi/bin:$PATH"
                 export CPATH="/lib64/openmpi/include:$CPATH"
                 export MPI_DIR="/lib64/openmpi"
                 export MPI_ROOT="/lib64/openmpi"
                 export OPENMPI="/lib64/openmpi"
                 export MPI_CC="mpicc"
                 export MPI_CXX="mpicxx"
                 export LD_LIBRARY_PATH="/lib64/openmpi/lib:$LD_LIBRARY_PATH"
                 export PKG_CONFIG_PATH="/lib64/openmpi/lib/pkgconfig:$PKG_CONFIG_PATH"
                 export LIBRARY_PATH="/lib64/openmpi/lib:$LIBRARY_PATH"
                 export MPI_LIBDIR="/lib64/openmpi/lib"
                 export MPI_INCDIR="/lib64/openmpi/include"
                 export MPI_INCLUDE="-I/usr/include/openmpi-x86_64 -pthread"
                 source /share/software/OpenFOAM/OpenFOAM-v2212/etc/bashrc
                 env > ~/testenv
                 env >> /actions-runner/.env 
  do-the-job:
    name: Do the job on the runner
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - name: Checkout OGL
        uses: actions/checkout@v2
        with:
          ref: Testrefact
      - name: Config 1
        shell: bash
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DGINKGO_BUILD_CUDA=ON .
      - name: Config 2
        if: always()
        shell: bash
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DGINKGO_BUILD_CUDA=ON .
      - name: Build
        shell: bash
        run: cmake --build . --config Release
      - name: Install
        shell: bash
        run: cmake --install .
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - do-the-job # required to wait when the main job is done
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: false #${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::308634587211:role/Github-OIDC-Role-29bocUD8VBZr
          aws-region: us-east-1
      - name: Stop EC2 runner
        uses: HendriceH/ec2-github-runner@v1.8
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
